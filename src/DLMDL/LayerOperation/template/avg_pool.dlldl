@name: avg_pool

@caffe_import:
    import sys
    from caffe import layers as L
    import numpy as np

@tf_import:
    import tensorflow as tf

@attributes:
[
    {
        "name": "ksize",
        "mandatory": "both",
        "source": "layer"
    },
    {
        "name": "stride",
        "mandatory": "both",
        "source": "layer"
    },
    {
        "name": "padding",
        "mandatory": "both",
        "default": "SAME",
        "source": "layer"
    },
    {
        "name": "data_format",
        "mandatory": "tf",
        "default": "NHWC",
        "source": "layer"
    },
    {
        "name": "activation",
        "mandatory": "both",
        "default": [],
        "source": "layer"
    },
    {
        "name": "use_global_stats",
        "mandatory": "both",
        "default": false,
        "source": "layer"
    },
    {
        "name": "moving_avg_fraction",
        "mandatory": "both",
        "default": 0.999,
        "source": "layer"
    },
    {
        "name": "epsilon",
        "mandatory": "both",
        "default": 1e-5,
        "source": "layer"
    },
    {
        "name": "is_scale",
        "mandatory": "both",
        "default": false,
        "source": "layer"
    },
    {
        "name": "bias_term",
        "mandatory": "both",
        "default": false,
        "source": "layer"
    }
]

@caffe_compile_time:
    ksize = self.get_attr('ksize')
    stride = self.get_attr('stride')
    padding = self.get_attr('padding', self.padding)

    input_ = self.get_input('input')
    indim = self.get_dimension('input')
    # padding
    if padding == 'SAME':
        #print self.name + " : " + str(indim)
        outdim = [np.ceil(float(indim[i]) / float(stride)) for i in xrange(2)]
        p = [int(((outdim[i] - 1) * stride + ksize - indim[i])/2) for i in xrange(2)]
    else:
        outdim = [np.ceil(float(indim[i] - ksize + 1) / float(stride)) for i in xrange(2)]
        p = [0, 0]
    # pool=0: max_pool, pool=1: avr_pool
    layer = L.Pooling(input_, name=self.name, pool=1, kernel_size=ksize, stride=stride, pad_h=p[0], pad_w=p[1])

    ### activation
    activation = self.get_attr('activation', self.activation)
    for act in activation:
        # relu
        if act == 'relu':
            layer = L.ReLU(layer, name=self.name + '_relu', in_place=True)

        # batch normalization
        elif act == 'batchnorm':
            use_global_stats = self.get_attr('use_global_stats', self.use_global_stats)
            moving_average_fraction = self.get_attr('moving_average_fraction', self.moving_average_fraction)
            epsilon = self.get_attr('epsilon', self.epsilon)
            layer = L.BatchNorm(layer, name=self.name + '_batchnorm',
                                            use_global_stats=use_global_stats,
                                            moving_average_fraction=moving_average_fraction, eps=epsilon,
                                in_place=True)

            # scale
            if self.get_attr('is_scale', self.is_scale):
                bias_term = self.get_attr('bias_term', self.bias_term)
                layer = L.Scale(layer, bias_term=bias_term, in_place=True)

                # TODO: output이름 DLMDL과 맞출 지 고민
                # self.set_output('output', layer)
                # self.set_dimension('output', outdim)
        for output_name in self.outputs_list:
            self.set_output(output_name, layer)
            self.set_dimension(output_name, outdim)

@caffe_run_time:
    pass


@tf_compile_time:
    pass

@tf_run_time:
    def apiConstructor(input_, ksize, stride, padding, activation):
        ksize = [1, ksize, ksize, 1]
        data_format = self.get_attr('data_format', self.data_format)
        if data_format == 'NCHW':
            strides = [1, 1, stride, stride]
        else:
            strides = [1, stride, stride, 1]
        indim = self.get_dimension('input')
        avgpool_ = tf.nn.avg_pool(input_, ksize, strides, padding, data_format=data_format)
        if len(activation) != 0:
            for act in activation:
                if act == 'relu':
                    avgpool_ = tf.nn.relu(avgpool_)
                else:
                    if act == 'batchnorm':
                        is_training = self.get_attr('use_global_stats', self.use_global_stats)
                        decay = self.get_attr('moving_average_fraction', self.moving_average_fraction)
                        epsilon = self.get_attr('epsilon', self.epsilon)
                        scale = False
                        center = False
                        if self.get_attr('is_scale', False) == True:
                            scale = True
                            center = self.get_attr('bias_term', False)
                        # batch normalization and sacling activation
                        avgpool_ = tf.contrib.layers.batch_norm(avgpool_,
                                                                decay=decay,
                                                                center=center,
                                                                scale=scale,
                                                                epsilon=epsilon,
                                                                is_training=is_training)
                    # TODO: other activation layer
                    else:
                        pass

        tf.summary.histogram('activations', avgpool_)
        outdim = list(avgpool_.get_shape()[i].value for i in xrange(len(avgpool_.get_shape())))
        self.set_dimension('output', outdim)
        self.set_output('output', avgpool_)

    ksize = self.get_attr('ksize')
    stride = self.get_attr('stride')
    padding = self.get_attr('padding')
    activation = self.get_attr('activation',self.activation)
    input_ = self.get_input('input')

    with tf.name_scope(self.name) as scope:
        if learning_option.get("parallel", None) != "DP":
             with tf.device('/job:worker/task:%s' % self.get_attr('device')):
                apiConstructor(input_, ksize, stride, padding, activation)
        else:
            apiConstructor(input_, ksize, stride, padding, activation)