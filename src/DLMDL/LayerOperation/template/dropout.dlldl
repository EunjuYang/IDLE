@name: dropout

@caffe_import:
    import sys
    from caffe import layers as L
    import numpy as np

@tf_import:
    import tensorflow as tf

@attributes:
[
    {
        "source": "layer",
        "mandatory": "both",
        "name": "dropout_ratio"
    }
]

@caffe_compile_time:
    dropout_ratio = self.get_attr('dropout_ratio')
    input_ = self.get_input('input')
    indim = self.get_dimension('input')

    # Dropout
    layer = L.Pooling(input_, name=self.name, dropout_ratio=dropout_ratio)

    # TODO: output이름 DLMDL과 맞출 지 고민
    self.set_output('output', layer)
    self.set_dimension('output', indim)
    # for output_name in self.outputs_list:
    #     self.set_output(output_name, layer)
    #     self.set_dimension(output_name, indim)
@caffe_run_time:
    pass

@tf_compile_time:
    pass

@tf_run_time:
    def apiConstructor(input_, keep_prob):
        drop_ = tf.nn.dropout(input_, keep_prob)
        tf.summary.scalar('dropout', drop_)
        self.set_output('output', drop_)
    input_ = self.get_input('input')
    keep_prob = 1 - self.get_attr('dropout_ratio', self.dropout_ratio)

    with tf.name_scope(self.name) as scope:
        if learning_option.get("parallel", None) != "DP":
             with tf.device('/job:worker/task:%s' % self.get_attr('device')):
                apiConstructor(input_, keep_prob)
        else:
            apiConstructor(input_, keep_prob)
